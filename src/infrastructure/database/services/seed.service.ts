import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { envKeys, EnvSchema } from 'src/config';
import { PrismaService } from '../prisma/prisma.service';
import { languagesData } from './constants/languages.constants';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 *
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ë–î –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 *
 * @description
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ë–î –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ.
 * –í–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —è–∑—ã–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.
 *
 * @example
 * // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–µ—Ä–≤–∏—Å–µ
 * constructor(private seed: SeedService) {}
 *
 * @example
 * // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏
 * await this.seed.seedLanguages();
 *
 * @example
 * // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * await this.seed.seedInitialData();
 *
 * @example
 * // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 * await this.seed.clearAllData();
 */
@Injectable()
export class SeedService {
  private readonly logger = new Logger(SeedService.name);

  // ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
  private readonly ADMIN_ID = 'cmefhefgg0000p4xvds3jc5rt';

  constructor(
    private readonly prisma: PrismaService,
    private readonly configService: ConfigService<EnvSchema>
  ) {}

  /**
   * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
   */
  async seedLanguages(): Promise<void> {
    try {
      this.logger.log('üåç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤...');

      for (const languageData of languagesData) {
        const existingLanguage = await this.prisma.language.findUnique({
          where: { code: languageData.code },
        });

        if (existingLanguage) {
          this.logger.log(`‚úÖ –Ø–∑—ã–∫ ${languageData.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          continue;
        }

        await this.prisma.language.create({
          data: {
            code: languageData.code,
            name: languageData.name,
            isEnabled: languageData.isActive,
          },
        });

        this.logger.log(`‚úÖ –Ø–∑—ã–∫ ${languageData.name} –¥–æ–±–∞–≤–ª–µ–Ω`);
      }

      this.logger.log('üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async seedInitialData(): Promise<void> {
    try {
      this.logger.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —è–∑—ã–∫–∏
      await this.seedLanguages();

      this.logger.log('üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞
   */
  async checkAdminExists(): Promise<boolean> {
    try {
      const admin = await this.prisma.user.findUnique({
        where: { id: this.ADMIN_ID },
      });
      return !!admin;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∞
   */
  getAdminId(): string {
    return this.ADMIN_ID;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   */
  async clearAllData(): Promise<void> {
    const nodeEnv = this.configService.get(envKeys.NODE_ENV) as string;
    if (nodeEnv === 'production') {
      throw new Error('Cannot clear data in production');
    }

    try {
      this.logger.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');

      await this.prisma.$transaction([
        this.prisma.auditLog.deleteMany(),
        this.prisma.progress.deleteMany(),
        this.prisma.userCard.deleteMany(),
        this.prisma.userSet.deleteMany(),
        this.prisma.achievement.deleteMany(),
        this.prisma.session.deleteMany(),
        this.prisma.card.deleteMany(),
        this.prisma.set.deleteMany(),
        this.prisma.folder.deleteMany(),
        this.prisma.definition.deleteMany(),
        this.prisma.example.deleteMany(),
        this.prisma.grammarRule.deleteMany(),
        this.prisma.tag.deleteMany(),
        this.prisma.language.deleteMany(),
        // –ù–ï —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞
      ]);

      this.logger.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  async getSeedingStats(): Promise<{
    languages: number;
    adminExists: boolean;
  }> {
    try {
      const [languagesCount, adminExists] = await Promise.all([
        this.prisma.language.count(),
        this.checkAdminExists(),
      ]);

      return {
        languages: languagesCount,
        adminExists,
      };
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  }
}
