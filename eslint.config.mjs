import eslint from '@eslint/js';
import eslintPluginPrettierRecommended from 'eslint-plugin-prettier/recommended';
import globals from 'globals';
import tseslint from 'typescript-eslint';
import importPlugin from 'eslint-plugin-import';
import simpleImportSort from 'eslint-plugin-simple-import-sort';

export default tseslint.config(
  {
    ignores: ['eslint.config.mjs', 'dist/**', 'node_modules/**', 'coverage/**'],
  },
  eslint.configs.recommended,
  ...tseslint.configs.recommendedTypeChecked,
  eslintPluginPrettierRecommended,
  {
    plugins: {
      import: importPlugin,
      'simple-import-sort': simpleImportSort,
    },
    rules: {
      // üîí –ó–∞–ø—Ä–µ—Ç any - —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
      '@typescript-eslint/no-explicit-any': 'error',
      '@typescript-eslint/no-unsafe-assignment': 'error',
      '@typescript-eslint/no-unsafe-call': 'error',
      '@typescript-eslint/no-unsafe-member-access': 'error',
      '@typescript-eslint/no-unsafe-return': 'error',
      '@typescript-eslint/no-unsafe-argument': 'error',

      // üö´ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∏–º–ø–æ—Ä—Ç—ã
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
          caughtErrorsIgnorePattern: '^_',
          destructuredArrayIgnorePattern: '^_',
        },
      ],
      'no-unused-vars': 'off', // –û—Ç–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –≤ –ø–æ–ª—å–∑—É TypeScript –≤–µ—Ä—Å–∏–∏
      'import/no-unused-modules': 'error',

      // üîÑ Promise –∏ async/await
      '@typescript-eslint/no-floating-promises': 'error',
      '@typescript-eslint/await-thenable': 'error',

      // üìù –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
      'simple-import-sort/imports': [
        'error',
        {
          groups: [
            // 1. –í–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –±—É–∫–≤ –∏–ª–∏ @, –Ω–∞–ø—Ä–∏–º–µ—Ä, @nestjs/*, zod)
            ['^@?\\w'],
            // 2. –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ shared (–Ω–∞–ø—Ä–∏–º–µ—Ä, src/shared/utils/env.utils)
            ['^src/shared/'],
            // 3. –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ config (–Ω–∞–ø—Ä–∏–º–µ—Ä, src/config/env/env.schema)
            ['^src/config/'],
            // 4. –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ infrastructure (–Ω–∞–ø—Ä–∏–º–µ—Ä, src/infrastructure/prisma/prisma.service)
            ['^src/infrastructure/'],
            // 5. –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ integrations (–Ω–∞–ø—Ä–∏–º–µ—Ä, src/integrations/*)
            ['^src/integrations/'],
            // 6. –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ modules (–Ω–∞–ø—Ä–∏–º–µ—Ä, src/modules/auth/auth.module)
            ['^src/modules/'],
            // 7. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (./, ../) –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            ['^\\./', '^\\../'],
            // 8. –ò–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤ (–≤–Ω–µ—à–Ω–∏–µ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ)
            ['^@?\\w.*\$', '^src/.*\$', '^\\..*\$'],
          ],
        },
      ],
      'simple-import-sort/exports': 'error',
      'import/first': 'error', // –ò–º–ø–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
      'import/newline-after-import': 'error', // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
      'import/no-duplicates': 'error', // –ó–∞–ø—Ä–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–ø–æ—Ä—Ç–æ–≤

      // üõ°Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      '@typescript-eslint/no-non-null-assertion': 'warn',
      '@typescript-eslint/prefer-nullish-coalescing': 'error',
      '@typescript-eslint/prefer-optional-chain': 'error',

      // üìã –°—Ç–∏–ª—å –∫–æ–¥–∞
      'prefer-const': 'error',
      '@typescript-eslint/no-var-requires': 'error',
      '@typescript-eslint/explicit-function-return-type': 'off', // –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏
      '@typescript-eslint/explicit-module-boundary-types': 'off', // –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏
      '@typescript-eslint/no-empty-function': 'warn',
      '@typescript-eslint/no-inferrable-types': 'error',

      // üîç –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      '@typescript-eslint/no-unnecessary-type-constraint': 'warn',
    },
    languageOptions: {
      globals: {
        ...globals.node,
        ...globals.jest,
      },
      sourceType: 'commonjs',
      parserOptions: {
        projectService: true,
        tsconfigRootDir: import.meta.dirname,
      },
    },
  }
);
